class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def find_pair_with_sum(root, target_sum):
    if not root:
        return None
    
    left_ptr, right_ptr = root, root
    left_stack, right_stack = [], []
    
    # Initialize left pointer to the leftmost node and right pointer to the rightmost node
    while left_ptr:
        left_stack.append(left_ptr)
        left_ptr = left_ptr.left
    
    while right_ptr:
        right_stack.append(right_ptr)
        right_ptr = right_ptr.right
    
    while left_stack and right_stack:
        left_node, right_node = left_stack[-1], right_stack[-1]
        
        if left_node == right_node:
            break  # Avoid comparing the same node with itself
        
        current_sum = left_node.value + right_node.value
        
        if current_sum == target_sum:
            return (left_node.value, right_node.value)
        elif current_sum < target_sum:
            # Move left pointer to the right
            left_stack.pop()
            left_ptr = left_node.right
            while left_ptr:
                left_stack.append(left_ptr)
                left_ptr = left_ptr.left
        else:
            # Move right pointer to the left
            right_stack.pop()
            right_ptr = right_node.left
            while right_ptr:
                right_stack.append(right_ptr)
                right_ptr = right_ptr.right
    
    return None

# Helper function to insert a value into a BST
def insert(root, value):
    if not root:
        return TreeNode(value)
    if value < root.value:
        root.left = insert(root.left, value)
    else:
        root.right = insert(root.right, value)
    return root

# Sample input BST
root = None
values = [60, 70, 50, 40, 80, 90]
for value in values:
    root = insert(root, value)

# Find the pair with the given sum
target_sum = 130
result = find_pair_with_sum(root, target_sum)

if result:
    print(f"Pair is {result}")
else:
    print("Nodes are not found")
